{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Driver2Vec Reproduction of Driver2Vec paper by Yang et al. (2021). Authors: Danish Khan, Achille Bailly and Mingjia He Introduction The neural network architecture Driver2Vec is discussed and used to detect drivers from automotive data in this blogpost. Yang et al. published a paper in 2021 that explained and evaluated Driver2Vec, which outperformed other architectures at that time. Driver2Vec (is the first architecture that) blends temporal convolution with triplet loss using time series data [1] . With this embedding, it is possible to classify different driving styles. The purpose of this reproducibility project is to recreate the Driver2Vec architecture and reproduce Table 5 from the original paper. The purpose of this blog post is to give a full explanation of this architecture as well as to develop it from the ground up. Researchers employ sensors found in modern vehicles to determine distinct driving patterns. In this manner, the efficacy is not dependent on invasive data, such as facial recognition or fingerprints. A system like this may detect who is driving the car and alter its vehicle settings accordingly. Furthermore, a system that recognizes driver types with high accuracy may be used to identify unfamiliar driving patterns, lowering the chance of theft. Method Driver2Vec transforms a 10-second clip of sensor data to an embedding that is being used to identify different driving styles [1] . This procedure can be broken down into two steps. In the first stage, a temporal convolutional network (TCN) and a Haar wavelet transform are utilized individually, then concatenated to generate a 62-length embedding. This embedding is intended such that drivers with similar driving styles are near to one another while drivers with different driving styles are further apart. Temporal Convolutional Network (TCN) Temporal Convolutional Networks (TCN) combines the architecture of convolutional networks and recurrent networks. The principle of TCN consists of two aspects: The output of TCN has the same length as the input. TCN uses causal convolutions, where an output at a specific time step is only depend on the input from this time step and earlier in the previous layer. To ensure the first principle, zero padding is applied. As shown in Figure 1 , the zero padding is applied on the left side of the input tensor and ensure causal convolution. In this case, the kernel size is 3 and the input length is 4. With a padding size of 2, the output length is equal to the input length. Figure 1. Zero padding [2] One of the problems of casual convolution is that the history size it can cover is linear in the depth of network. Simple casual convolution could be challenging when dealing with sequential tasks that require a long history coverage, as very deep network would have many parameters, which may expand training time and lead to overfitting. Thus, dilated convolution is used to increase the receptive field size while having a small number of layers. Dilation is the name for the interval length between the elements in a layer used to compute one element of the next layer. The convolution with a dilation of one is a simple regular convolution. In TCN, dilation exponentially increases as progress through the layers. As shown in Figure 2 , as the network moves deeper, the elements in the next layer cover larger range of elements in the previous layer. Figure 2. An example of dilated causal convolution [3] TCN employs generic residual module in place of a convolutional layer. The structure of residual connection is shown in Figure 3 , in each residual block, TCN has two layers including dilated causal convolution, weight normalization, rectified linear unit (ReLU) and dropout. Figure 3. The residual module in TCN [3] Haar Wavelet Transform Driver2vec applied Haar wavelet transformation to generates two vectors in the frequency domain. Wavelet Transform decomposes a time series function into a set of wavelets. A Wavelet is an oscillation use to decompose the signal, which has two characteristics, scale and location. Large scale can capture low frequency information and conversely, small scale is designed for high frequency information. Location defines the time and space of the wavelet. The essence of Wavelet Transform is to measure how much of a wavelet is in a signal for a particular scale and location. The process of Wavelet Transform consists of four steps: the wavelet moves across the entire signal with various location the coefficients of trend and fluctuation for at each time step is calculated use scalar product (in following equations) increase the wavelet scale repeat the process. \\[a_{m}=f \\cdot W_{m}\\] \\[d_m = f \\cdot V_m\\] Most specifically, the Haar transform decomposes a discrete signal into two sub-signals of half its length, one is a running average or trend and the other is a running difference or fluctuation. As shown in the following equations, the first trend subsignal is computed from the average of two values and fluctuation, the second trend subsignal, is computed by taking a running difference, as shown in Equation 2. This structure enable transform to detect small fluctuations feature in signals. Figure 4 shows how Haar transform derives sub-signals for the signal \\(f=(4, 6, 10, 12, 8, 6, 5, 5)\\) \\[ a_m = \\frac{f_{2m-1} + f_{2m+1}}{\\sqrt{2}}\\] \\[ d_m = \\frac{f_{2m-1} - f_{2m+1}}{\\sqrt{2}}\\] Figure 4. An example for Haar transform [4] Full architecture The two vectors that the wavelet transform outputs are then fed through a Fully Connected (FC) layer to map them to a 15 dimensional vector. Both of them are concatenated with the last output of the TCN and fed through a final FC layer with Batch Normalization and a sigmoid activation function to get our final embedding. Triplet Margin Loss Once we the embedding from the full architecture, we need a way to train the network. With no ground truth to compare the output to, the triplet margin loss is used. At its core, this criterion pulls together the embeddings that are supposed to be close and pushes away the ones that are not. Mathematically, it is defined as follows: \\[ \\textbf{L}(x_{r},x_{p},x_{n})=max(0,D_{rp}^{2} + D_{rp}^{2} + \\alpha) \\] Where \\(x_{r,p,n}\\) are the embeddings for the anchor, positive and negative samples respectively, \\(D_{rp}\\) (resp. \\(D_{rn}\\) ) is the distance (usually euclidian) between the anchor and the positive embdeggings (resp. negative) and \\(\\alpha\\) is a positive number called the margin (often set to \\(1.0\\) ). Essentially, it is trying to make sure that the following inequation is respected: \\[ D_{rp}^{2} + \\alpha \\less D_{rp}^{2} \\] With the available dataset being so limited, choosing the positive and negative samples for each anchor at random is probably enough. In most cases however, the most efficient way of choosing them is to pick the worst ones for each anchor (see [5] ), i.e. chossing the positive sample that is the farthest away and the negative one that is the closest. Again, for more detail on how to actually do that efficiently, go to the website referenced in [5] for a very detailed explanation. Gradient Boosting Decision Trees (LightGBM) Data The original dataset includes 51 anonymous driver test drives on four distinct types of roads (highway, suburban, urban, and tutorial), with each driver spending roughly fifteen minutes on a high-end driving simulator built by Nervtech [1] . However, this entire dataset is not made publicly available and instead, only a small sample of the dataset can be found in a anonymized repository on Github. Instead of 51 drivers and fifteen minutes of recording time, this sample has ten second samples captured at 100Hz of five drivers for each distinct road type. As a result, the sample size is dramatically reduced. Nine groups The columns remain identical. Although both the original and sampled datasets include 38 columns, only 31 of them are used for the architecture, which is divided into nine categories. 1. Acceleration Column names Description ACCELERATION acceleration in X axis ACCELERATION_Y acceleration in Y axis ACCELERATION_Z acceleration in Z axis 2. Distance information Column names Description DISTANCE_TO_NEXT_VEHICLE distance to next vehicle DISTANCE_TO_NEXT_INTERSECTION distance to next intersection DISTANCE_TO_NEXT_STOP_SIGNAL distance to next stop signal DISTANCE_TO_NEXT_TRAFFIC_LIGHT_SIGNAL distance to next traffic light DISTANCE_TO_NEXT_YIELD_SIGNAL distance to next yield signal DISTANCE distance to completion 3. Gearbox Column names Description GEARBOX whether gearbox is used CLUTCH_PEDAL whether clutch pedal is pressed 4. Lane Information Column names Description LANE lane that the vehicle is in FAST_LANE whether vehicle is in the fast lane LANE_LATERAL_SHIFT_RIGHT location in lane (right) LANE_LATERAL_SHIFT_CENTER location in lane (center) LANE_LATERAL_SHIFT_LEFT location in lane (left) LANE_WIDTH width of lane 5. Pedals Column names Description ACCELERATION_PEDAL whether acceleration pedal is pressed BRAKE_PEDAL whether break pedal is pressed 6. Road Angle Column names Description STEERING_WHEEL angle of steering wheel CURVE_RADIUS radius of road (if there is a curve) ROAD_ANGLE angle of road 7. Speed Column names Description SPEED speed in X axis SPEED_Y speed in Y axis SPEED_Z speed in Z axis SPEED_NEXT_VEHICLE speed of the next vehicle SPEED_LIMIT speed limit of road 8. Turn indicators Column names Description INDICATORS whether turn indicator is on INDICATORS_ON_INTERSECTION whether turn indicator is activated for an intersection 9. Uncategorized Column names Description HORN whether horn is activated HEADING heading of vehicle (10. Omitted from Driver2Vec) Column names Description FOG whether there is fog FOG_LIGHTS whether fog light is on FRONT_WIPERS whether front wiper is activated HEAD_LIGHTS whether headlights are used RAIN whether there is rain REAR_WIPERS whether rear wiper is activated SNOW whether there is snow Results Reference [1] Yang, J., Zhao, R., Zhu, M., Hallac, D., Sodnik, J., & Leskovec, J. (2021). Driver2vec: Driver identification from automotive data. arXiv preprint arXiv:2102.05234. [2] Francesco, L. (2021). Temporal Convolutional Networks and Forecasting. https://unit8.com/resources/temporal-convolutional-networks-and-forecasting/ [3] Bai, S., Kolter, J. Z., & Koltun, V. (2018). An empirical evaluation of generic convolutional and recurrent networks for sequence modeling. arXiv preprint arXiv:1803.01271. [4] Haar Wavelets http://dsp-book.narod.ru/PWSA/8276_01.pdf [5] Good explanation and implementation (in Tensorflow) of the Triplet Loss: https://omoindrot.github.io/triplet-loss","title":"Driver2Vec"},{"location":"#driver2vec","text":"Reproduction of Driver2Vec paper by Yang et al. (2021). Authors: Danish Khan, Achille Bailly and Mingjia He","title":"Driver2Vec"},{"location":"#introduction","text":"The neural network architecture Driver2Vec is discussed and used to detect drivers from automotive data in this blogpost. Yang et al. published a paper in 2021 that explained and evaluated Driver2Vec, which outperformed other architectures at that time. Driver2Vec (is the first architecture that) blends temporal convolution with triplet loss using time series data [1] . With this embedding, it is possible to classify different driving styles. The purpose of this reproducibility project is to recreate the Driver2Vec architecture and reproduce Table 5 from the original paper. The purpose of this blog post is to give a full explanation of this architecture as well as to develop it from the ground up. Researchers employ sensors found in modern vehicles to determine distinct driving patterns. In this manner, the efficacy is not dependent on invasive data, such as facial recognition or fingerprints. A system like this may detect who is driving the car and alter its vehicle settings accordingly. Furthermore, a system that recognizes driver types with high accuracy may be used to identify unfamiliar driving patterns, lowering the chance of theft.","title":"Introduction"},{"location":"#method","text":"Driver2Vec transforms a 10-second clip of sensor data to an embedding that is being used to identify different driving styles [1] . This procedure can be broken down into two steps. In the first stage, a temporal convolutional network (TCN) and a Haar wavelet transform are utilized individually, then concatenated to generate a 62-length embedding. This embedding is intended such that drivers with similar driving styles are near to one another while drivers with different driving styles are further apart.","title":"Method"},{"location":"#temporal-convolutional-network-tcn","text":"Temporal Convolutional Networks (TCN) combines the architecture of convolutional networks and recurrent networks. The principle of TCN consists of two aspects: The output of TCN has the same length as the input. TCN uses causal convolutions, where an output at a specific time step is only depend on the input from this time step and earlier in the previous layer. To ensure the first principle, zero padding is applied. As shown in Figure 1 , the zero padding is applied on the left side of the input tensor and ensure causal convolution. In this case, the kernel size is 3 and the input length is 4. With a padding size of 2, the output length is equal to the input length. Figure 1. Zero padding [2] One of the problems of casual convolution is that the history size it can cover is linear in the depth of network. Simple casual convolution could be challenging when dealing with sequential tasks that require a long history coverage, as very deep network would have many parameters, which may expand training time and lead to overfitting. Thus, dilated convolution is used to increase the receptive field size while having a small number of layers. Dilation is the name for the interval length between the elements in a layer used to compute one element of the next layer. The convolution with a dilation of one is a simple regular convolution. In TCN, dilation exponentially increases as progress through the layers. As shown in Figure 2 , as the network moves deeper, the elements in the next layer cover larger range of elements in the previous layer. Figure 2. An example of dilated causal convolution [3] TCN employs generic residual module in place of a convolutional layer. The structure of residual connection is shown in Figure 3 , in each residual block, TCN has two layers including dilated causal convolution, weight normalization, rectified linear unit (ReLU) and dropout. Figure 3. The residual module in TCN [3]","title":"Temporal Convolutional Network (TCN)"},{"location":"#haar-wavelet-transform","text":"Driver2vec applied Haar wavelet transformation to generates two vectors in the frequency domain. Wavelet Transform decomposes a time series function into a set of wavelets. A Wavelet is an oscillation use to decompose the signal, which has two characteristics, scale and location. Large scale can capture low frequency information and conversely, small scale is designed for high frequency information. Location defines the time and space of the wavelet. The essence of Wavelet Transform is to measure how much of a wavelet is in a signal for a particular scale and location. The process of Wavelet Transform consists of four steps: the wavelet moves across the entire signal with various location the coefficients of trend and fluctuation for at each time step is calculated use scalar product (in following equations) increase the wavelet scale repeat the process. \\[a_{m}=f \\cdot W_{m}\\] \\[d_m = f \\cdot V_m\\] Most specifically, the Haar transform decomposes a discrete signal into two sub-signals of half its length, one is a running average or trend and the other is a running difference or fluctuation. As shown in the following equations, the first trend subsignal is computed from the average of two values and fluctuation, the second trend subsignal, is computed by taking a running difference, as shown in Equation 2. This structure enable transform to detect small fluctuations feature in signals. Figure 4 shows how Haar transform derives sub-signals for the signal \\(f=(4, 6, 10, 12, 8, 6, 5, 5)\\) \\[ a_m = \\frac{f_{2m-1} + f_{2m+1}}{\\sqrt{2}}\\] \\[ d_m = \\frac{f_{2m-1} - f_{2m+1}}{\\sqrt{2}}\\] Figure 4. An example for Haar transform [4]","title":"Haar Wavelet Transform"},{"location":"#full-architecture","text":"The two vectors that the wavelet transform outputs are then fed through a Fully Connected (FC) layer to map them to a 15 dimensional vector. Both of them are concatenated with the last output of the TCN and fed through a final FC layer with Batch Normalization and a sigmoid activation function to get our final embedding.","title":"Full architecture"},{"location":"#triplet-margin-loss","text":"Once we the embedding from the full architecture, we need a way to train the network. With no ground truth to compare the output to, the triplet margin loss is used. At its core, this criterion pulls together the embeddings that are supposed to be close and pushes away the ones that are not. Mathematically, it is defined as follows: \\[ \\textbf{L}(x_{r},x_{p},x_{n})=max(0,D_{rp}^{2} + D_{rp}^{2} + \\alpha) \\] Where \\(x_{r,p,n}\\) are the embeddings for the anchor, positive and negative samples respectively, \\(D_{rp}\\) (resp. \\(D_{rn}\\) ) is the distance (usually euclidian) between the anchor and the positive embdeggings (resp. negative) and \\(\\alpha\\) is a positive number called the margin (often set to \\(1.0\\) ). Essentially, it is trying to make sure that the following inequation is respected: \\[ D_{rp}^{2} + \\alpha \\less D_{rp}^{2} \\] With the available dataset being so limited, choosing the positive and negative samples for each anchor at random is probably enough. In most cases however, the most efficient way of choosing them is to pick the worst ones for each anchor (see [5] ), i.e. chossing the positive sample that is the farthest away and the negative one that is the closest. Again, for more detail on how to actually do that efficiently, go to the website referenced in [5] for a very detailed explanation.","title":"Triplet Margin Loss"},{"location":"#gradient-boosting-decision-trees-lightgbm","text":"","title":"Gradient Boosting Decision Trees (LightGBM)"},{"location":"#data","text":"The original dataset includes 51 anonymous driver test drives on four distinct types of roads (highway, suburban, urban, and tutorial), with each driver spending roughly fifteen minutes on a high-end driving simulator built by Nervtech [1] . However, this entire dataset is not made publicly available and instead, only a small sample of the dataset can be found in a anonymized repository on Github. Instead of 51 drivers and fifteen minutes of recording time, this sample has ten second samples captured at 100Hz of five drivers for each distinct road type. As a result, the sample size is dramatically reduced.","title":"Data"},{"location":"#nine-groups","text":"The columns remain identical. Although both the original and sampled datasets include 38 columns, only 31 of them are used for the architecture, which is divided into nine categories.","title":"Nine groups"},{"location":"#1-acceleration","text":"Column names Description ACCELERATION acceleration in X axis ACCELERATION_Y acceleration in Y axis ACCELERATION_Z acceleration in Z axis","title":"1. Acceleration"},{"location":"#2-distance-information","text":"Column names Description DISTANCE_TO_NEXT_VEHICLE distance to next vehicle DISTANCE_TO_NEXT_INTERSECTION distance to next intersection DISTANCE_TO_NEXT_STOP_SIGNAL distance to next stop signal DISTANCE_TO_NEXT_TRAFFIC_LIGHT_SIGNAL distance to next traffic light DISTANCE_TO_NEXT_YIELD_SIGNAL distance to next yield signal DISTANCE distance to completion","title":"2. Distance information"},{"location":"#3-gearbox","text":"Column names Description GEARBOX whether gearbox is used CLUTCH_PEDAL whether clutch pedal is pressed","title":"3. Gearbox"},{"location":"#4-lane-information","text":"Column names Description LANE lane that the vehicle is in FAST_LANE whether vehicle is in the fast lane LANE_LATERAL_SHIFT_RIGHT location in lane (right) LANE_LATERAL_SHIFT_CENTER location in lane (center) LANE_LATERAL_SHIFT_LEFT location in lane (left) LANE_WIDTH width of lane","title":"4. Lane Information"},{"location":"#5-pedals","text":"Column names Description ACCELERATION_PEDAL whether acceleration pedal is pressed BRAKE_PEDAL whether break pedal is pressed","title":"5. Pedals"},{"location":"#6-road-angle","text":"Column names Description STEERING_WHEEL angle of steering wheel CURVE_RADIUS radius of road (if there is a curve) ROAD_ANGLE angle of road","title":"6. Road Angle"},{"location":"#7-speed","text":"Column names Description SPEED speed in X axis SPEED_Y speed in Y axis SPEED_Z speed in Z axis SPEED_NEXT_VEHICLE speed of the next vehicle SPEED_LIMIT speed limit of road","title":"7. Speed"},{"location":"#8-turn-indicators","text":"Column names Description INDICATORS whether turn indicator is on INDICATORS_ON_INTERSECTION whether turn indicator is activated for an intersection","title":"8. Turn indicators"},{"location":"#9-uncategorized","text":"Column names Description HORN whether horn is activated HEADING heading of vehicle","title":"9. Uncategorized"},{"location":"#10-omitted-from-driver2vec","text":"Column names Description FOG whether there is fog FOG_LIGHTS whether fog light is on FRONT_WIPERS whether front wiper is activated HEAD_LIGHTS whether headlights are used RAIN whether there is rain REAR_WIPERS whether rear wiper is activated SNOW whether there is snow","title":"(10. Omitted from Driver2Vec)"},{"location":"#results","text":"","title":"Results"},{"location":"#reference","text":"[1] Yang, J., Zhao, R., Zhu, M., Hallac, D., Sodnik, J., & Leskovec, J. (2021). Driver2vec: Driver identification from automotive data. arXiv preprint arXiv:2102.05234. [2] Francesco, L. (2021). Temporal Convolutional Networks and Forecasting. https://unit8.com/resources/temporal-convolutional-networks-and-forecasting/ [3] Bai, S., Kolter, J. Z., & Koltun, V. (2018). An empirical evaluation of generic convolutional and recurrent networks for sequence modeling. arXiv preprint arXiv:1803.01271. [4] Haar Wavelets http://dsp-book.narod.ru/PWSA/8276_01.pdf [5] Good explanation and implementation (in Tensorflow) of the Triplet Loss: https://omoindrot.github.io/triplet-loss","title":"Reference"}]}